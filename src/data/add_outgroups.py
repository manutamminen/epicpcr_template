#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Apr 3 2021

@author: Manu Tamminen
"""


import logging
from itertools import groupby


hsapiens_id = ">Human_18S_rRNA_gene"
hsapiens_seq = """
CCGTCCGTCCGTCGTCCTCCTCGCTTGCGGGGCGCCGGGCCCGTCCTCGAGCCCCCNNNNNCCGTCCGGCC
GCGTCGGGGCCTCGCCGCGCTCTACCTACCTACCTGGTTGATCCTGCCAGTAGCATATGCTTGTCTCAAAG
ATTAAGCCATGCATGTCTAAGTACGCACGGCCGGTACAGTGAAACTGCGAATGGCTCATTAAATCAGTTAT
GGTTCCTTTGGTCGCTCGCTCCTCTCCTACTTGGATAACTGTGGTAATTCTAGAGCTAATACATGCCGACG
GGCGCTGACCCCCTTCGCGGGGGGGATGCGTGCATTTATCAGATCAAAACCAACCCGGTCAGCCCCTCTCC
GGCCCCGGCCGGGGGGCGGGCCGCGGCGGCTTTGGTGACTCTAGATAACCTCGGGCCGATCGCACGCCCCC
CGTGGCGGCGACGACCCATTCGAACGTCTGCCCTATCAACTTTCGATGGTAGTCGCCGTGCCTACCATGGT
GACCACGGGTGACGGGGAATCAGGGTTCGATTCCGGAGAGGGAGCCTGAGAAACGGCTACCACATCCAAGG
AAGGCAGCAGGCGCGCAAATTACCCACTCCCGACCCGGGGAGGTAGTGACGAAAAATAACAATACAGGACT
CTTTCGAGGCCCTGTAATTGGAATGAGTCCACTTTAAATCCTTTAACGAGGATCCATTGGAGGGCAAGTCT
GGTGCCAGCAGCCGCGGTAATTCCAGCTCCAATAGCGTATATTAAAGTTGCTGCAGTTAAAAAGCTCGTAG
TTGGATCTTGGGAGCGGGCGGGCGGTCCGCCGCGAGGCGAGCCACCGCCCGTCCCCGCCCCTTGCCTCTCG
GCGCCCCCTCGATGCTCTTAGCTGAGTGTCCCGCGGGGCCCGAAGCGTTTACTTTGAAAAAATTAGAGTGT
TCAAAGCAGGCCCGAGCCGCCTGGATACCGCAGCTAGGAATAATGGAATAGGACCGCGGTTCTATTTTGTT
GGTTTTCGGAACTGAGGCCATGATTAAGAGGGACGGCCGGGGGCATTCGTATTGCGCCGCTAGAGGTGAAA
TTCTTGGACCGGCGCAAGACGGACCAGAGCGAAAGCATTTGCCAAGAATGTTTTCATTAATCAAGAACGAA
AGTCGGAGGTTCGAAGACGATCAGATACCGTCGTAGTTCCGACCATAAACGATGCCGACCGGCGATGCGGC
GGCGTTATTCCCATGACCCGCCGGGCAGCTTCCGGGAAACCAAAGTCTTTGGGTTCCGGGGGGAGTATGGT
TGCAAAGCTGAAACTTAAAGGAATTGACGGAAGGGCACCACCAGGAGTGGAGCCTGCGGCTTAATTTGACT
CAACACGGGAAACCTCACCCGGCCCGGACACGGACAGGATTGACAGATTGATAGCTCTTTCTCGATTCCGT
GGGTGGTGGTGCATGGCCGTTCTTAGTTGGTGGAGCGATTTGTCTGGTTAATTCCGATAACGAACGAGACT
CTGGCATGCTAACTAGTTACGCGACCCCCGAGCGGTCGGCGTCCCCCAACTTCTTAGAGGGACAAGTGGCG
TTCAGCCACCCGAGATTGAGCAATAACAGGTCTGTGATGCCCTTAGATGTCCGGGGCTGCACGCGCGCTAC
ACTGACTGGCTCAGCGTGTGCCTACCCTACGCCGGCAGGCGCGGGTAACCCGTTGAACCCCATTCGTGATG
GGGATCGGGGATTGCAATTATTCCCCATGAACGAGGAATTCCCAGTAAGTGCGGGTCATAAGCTTGCGTTG
ATTAAGTCCCTGCCCTTTGTACACACCGCCCGTCGCTACTACCGATTGGATGGTTTAGTGAGGCCCTCGGA
TCGGCCCCGCCGGGGTCGGCCCACGGCCTGGCGGAGCGCTGAGAAGACGGTCGAACTTGACTATCTAGAGG
AAGTAAAAGTCGTAACAAGGTTTCCGTAGGTGAACCTGCGGAAGGATCATTA
""".replace("\n", "")


arch_id = ">JQ837894.1.1415"
arch_seq = """
CTCCGGAGGCTATTGCTATCAGGGTTTGACTAAGCCATGCGAGTCGAGAGGTGTAAGACCTCGGCATACTG
CTCAGTAACACGTGGATAATCTGCCCTCAGGTGAGGAATAATCCCGGGAAACTGGGGCTAATGCCTCATAG
GAGACGGGTGCTGGAATGCTCTGTCTCCCAAAGGTCCGCCGCCTGAGGATGAGTCTGCGTCCGATTAGGTT
GTTGTTGGGGTAACGGCCCAACAAGCCATTGATCGGTACGGGTTGTGGGAGCAAGAGCCCGGAGATGGATT
CTGAGACATGAATCCAGGCCCTACGGGGCGCAGCAGGCGCGAAAACTTTACAATGCGAGCAATCGTGATAA
GGAAACCCTGAGTGCCTGTCAATGCAGGCTGTTCTGGTGTCTAACACGCACCAGGAGAAAGGGCGGGGCAA
GACCGGTGCCAGCCGCCGCGGTAATACCGGCTGCTCGAGTGATAGCCGCTTTTACTGGGCTTAAAGCGTTC
GTAGCTTGGTTGTCAAGTCTCTGGGGAAATCTTCTGGCTTAACCAGAAGGCGTCTCAGGGAAACTGGCGAC
CTAGGAACCGGGAGAGGTGAGACGTACTTCGGGGGTAGGAGTGAAATCTTGTAATCCCCGAGGGACGACCG
ATGGCGAAGGCATCTCACCAGAACGGCTTCGACAGTGAGGGACGAAAGCTGGGGGAGCAAACCGGATTAGA
TACCCGGGTAGTCCCAGCCGTAAACGATGTGCGTTAGGTGTGTCGGTGACCACGAGTCGCCGAGGTGCCGA
AGGGAAACCGTGAAACGCACCGCCTGGGAAGTACGGTCGCAAGGCTGAAACTTAAAGGAATTGGCGGGGGA
GCACCACAACGGGTGGAGCCTGCGGTTTAATTGGATTCAACGCCGGACAACTCACCGGATACGACAGCGGA
ATGATAGCCGGGCTGAAGACTCTGCTTGACCAGCTGAGAGGAGGTGCATGGCCGTCGTCAGTTCGTACTGT
GAAGCATCCTGTTAAGTCAGGCAACGAGCGAGACCCACGCCAACAGTTGCCAGCATGGTCTCCGGACTGAT
GGGGACACTGTTGGGACCGCCTCTGCTAAAGGGGAGGAAGGAATGGGCAACGGTAGGTCAGCATGCCCCGA
ATTATCCGGGCTACACGCGGGCTACAATGGATGGGACAATGGGTTTCGACACCGAAAGGTGAAGGTAATCT
CCTAACCCCACCCGTAGTTCGGATTGCGGGCTGCAACTCGCCCGCATGAAGCTGGAATCCGTAGTAATCGC
GTCTCACGATGGCGCGGTGAATATGTCCCTGCTCCTTGCACACACCGCCCGTCAAACCACCCGAGTGGGGT
CTGGATGAGGCGGCAGTTTATGCTGCTGTCGAATCTAGGTTCCGCAAGGGGGGTTAAGTCGTAACA
""".replace("\n", "")


def read_fasta(fasta, remove_commas=False):
    """ Read a fasta file and yield pairs of fasta ids and DNA sequences.
    """
    with open(fasta) as f:
        grouped = groupby(f, lambda x: x[0] == ">")
        for cond, entry in grouped:
            if cond:
                fasta_id = next(entry)
                if remove_commas:
                    fasta_id = fasta_id.replace(",", "")
                _, seq_iter = next(grouped)
                seq = ''.join([line.strip() for line in seq_iter]).upper()
                yield ([fasta_id, seq])


def write_fasta(fasta_iter, output_file):
    """
    Write fasta iterables (such as those created by create_fasta_iter) into fasta files.
    """
    with open(output_file, "w") as f:
        for fasta_id, seq in fasta_iter:
            if fasta_id[0] != ">":
                fasta_id = ">" + fasta_id
            if "\n" not in fasta_id:
                fasta_id += "\n"
            if "\n" not in seq:
                seq += "\n"
            f.write(fasta_id + seq)


def add_outgroup(fasta_input, fasta_output, outgroup_id, outgroup_seq):
    fasta = read_fasta(fasta_input)
    out_fasta = [[outgroup_id, outgroup_seq]] + list(fasta)
    write_fasta(out_fasta, fasta_output)


if __name__ == '__main__':
    log_fmt = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    logging.basicConfig(level=logging.INFO, format=log_fmt)
    logger = logging.getLogger(__name__)

    logger.info('Adding bacterial outgroup')
    add_outgroup(
            fasta_input = snakemake.input[0],
            fasta_output = snakemake.output[0],
            outgroup_id = arch_id,
            outgroup_seq = arch_seq)

    logger.info('Adding eukaryotic outgroup')
    add_outgroup(
            fasta_input = snakemake.input[1],
            fasta_output = snakemake.output[1],
            outgroup_id = hsapiens_id,
            outgroup_seq = hsapiens_seq)
